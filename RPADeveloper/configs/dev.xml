<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" scriptlang="groovy">

	 <var-def name="citiesData">
	 	<http url="http://localhost:15110/wf-vr-training/temp.bucket/21033/cities.json"/>
	 </var-def>
	 
	 <script><![CDATA[ 
	 	outputData=new groovy.json.JsonSlurper().parseText(citiesData.toString())
	 	//println outputData
	 	outList=new ArrayList();
	 	int i=1;
	 	String cityName, lat, lon, pop, state, temp, pressure, hum, winSpeed, tor;
	 	while(i<=200){
	 			detailsMap=new HashMap();
	 			cityName=outputData.city[i-1].toString();
	 			lon=outputData.longitude[i-1].toString();
	 			lat=outputData.latitude[i-1].toString();
	 			pop=outputData.population[i-1].toString();
	 			state=outputData.state[i-1].toString();
	 			detailsMap.put("City", cityName);
	 			detailsMap.put("Longitue", lon);
	 			detailsMap.put("Latitude", lat);
	 			detailsMap.put("Population", pop);
	 			detailsMap.put("State", state);
	 			
	 			if(outputData.rank[i-1].equals(i.toString())){
	 			//println outputData.city[i-1].toString()+"   "+i 
	 			try{
	 				
	 				outAPI=new URL("http://api.openweathermap.org/data/2.5/weather?q="+cityName+",us&appid=b6370392ff2c8d934c5973a9cca95969&units=metric").getText();
	 				println outAPI.toString()
	 				outJson=new groovy.json.JsonSlurper().parseText(outAPI.toString());
	 				
	 				temp=outJson.main.temp;
	 				hum=outJson.main.humidity;
	 				pressure=outJson.main.pressure;
	 				winSpeed=outJson.wind.speed;
	 				tor=new Date((outJson.dt.toLong()) * 1000 ).format("E, dd MMM yyyy HH:mm:ss z", TimeZone.getTimeZone("GMT"));
	 				detailsMap.put("Temperature(C)",temp);
	 				detailsMap.put("Pressure(hPa)",hum);
	 				detailsMap.put("Humidity(%)",pressure);
	 				detailsMap.put("Wind speed(m/s)",winSpeed);
	 				detailsMap.put("Time of response",tor);
	 			}
	 			catch(Exception e){
	 				println "no report for: "+outputData.city[i-1].toString() 
	 				detailsMap.put("Temperature(C)","");
	 				detailsMap.put("Pressure(hPa)","");
	 				detailsMap.put("Humidity(%)","");
	 				detailsMap.put("Wind speed(m/s)","");
	 				detailsMap.put("Time of response","");
	 			}			
	 			}
	 			else{
	 				println "not matching the value of 'i'"
	 				
	 			}
	 		i++;
	 		outList.add(detailsMap);
	 	} 
	 	gsonConverted=new com.google.gson.Gson().toJson(outList);	
	 ]]></script>
	 
						 <var-def name="excel">
							<list-to-excel format="xlsx">
								<script return="gsonConverted"/>
							</list-to-excel>
						</var-def>
	
						<var-def name="excelFile">
	                        <s3 bucket="wf-vr-training" >
	                            <s3-put path="temp.bucket/21033/weatherReport.xlsx" content-type="application/vnd.ms-excel" acl="PublicRead" content-disposition="inline">
	                            	<var name="excel"/>
	                            </s3-put>
	                        </s3>
	                    </var-def>

       <robotics-flow>
              <robot name="email" driver="internet explorer" close-on-completion="false">
                     <script><![CDATA[
  				import org.openqa.selenium.*;
				import org.openqa.selenium.support.ui.ExpectedConditions;
				import org.openqa.selenium.WebDriverException;
				driver = email.getWrappedObject();
				WebDriverWait wait=new WebDriverWait(driver, 60);
								open("https://mail.rediff.com/cgi-bin/login.cgi");
								
				wait.until(ExpectedConditions.visibilityOfElementLocated(byCssSelector('#login1'))).click();
				sendKeys("ramakrishnareddy.sw");
				wait.until(ExpectedConditions.visibilityOfElementLocated(byCssSelector('#password'))).click();
				sendKeys("srkr@1984");
				sleep(3000);
				wait.until(ExpectedConditions.visibilityOfElementLocated(byCssSelector('input[type="submit"]'))).click();
				sleep(2000);
				wait.until(ExpectedConditions.visibilityOfElementLocated(byXpath('//*[@id="boxscroll"]/li[1]/a/b'))).click()
			//	$(byXpath('//*[text()="Write mail"]')).click();
				sleep(3000);
				wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector('#TO_IDcmp2'))).sendKeys("krishnas1502@gmail.com");
				sleep(3000);
                subject="Weather Report(Developer Asnmt)";
                wait.until(ExpectedConditions.visibilityOfElementLocated(byCssSelector('.fld_sub input'))).sendKeys(subject);
                sleep(10000);
                wait.until(ExpectedConditions.visibilityOfElementLocated(byCssSelector('.rd_comp_attach_bx.rd_comp_attach_contcmp4.rd_comp_attach_contcmp2 a'))).click();

				Thread.sleep(10000)       
				              ]]></script>
	
	</robot>
	
	
	<robot name="fileupload" driver="desktop" close-on-completion="true">
	<capability name="SEARCH_ALL_WINDOWS" value="true" />
	          			<var-def name="file">                           
			        		<http url="http://localhost:15110/wf-vr-training/temp.bucket/21033/weatherReport.xlsx"/>
						</var-def>
	
				<script><![CDATA[
					
											File f=new File("weatherReportData.xlsx")
											FileOutputStream fos=new FileOutputStream(f);
											fos.write(file.toBinary());
											fos.close();
										    filePath=f.getAbsolutePath();
											println filePath;						
					                       switchTo().window('[CLASS:#32770]') 
					                       Thread.sleep(3000);                       
						                   $('[CLASS:ComboBox; INSTANCE:1]').click()
						                   Thread.sleep(3000);
					                       sendKeys(filePath);
				                           Thread.sleep(3000);
				                           $('[CLASS:Button;INSTANCE:1]').click()
				                           Thread.sleep(3000);
				]]></script>
	</robot>
	
	
	<robot driver="internet explorer"  name="email" close-on-completion="true" maximize-on-startup="true" start-in-private="true">
	<script><![CDATA[ 
						sleep(5000);
						//switchToRootWindow();
						screenimage= driver().getScreenshotAs(OutputType.BYTES);
						sleep(5000);
						$(byCssSelector('a[class="send_ng_compo rd_btn_cmp_send"]')).click();
	
						]]></script>
	</robot>
							<var-def name="ScreenshotURL">
	                           <s3 bucket="wf-vr-training" >
	                               <s3-put path="temp.bucket/21033/DevMailScreenshot.png" content-type="image/png" acl="PublicRead" content-disposition="inline">
	                               	<script return="screenimage"/>
	                               </s3-put>
	                           </s3>
							</var-def>
				              
       </robotics-flow>
              

       <export include-original-data="false">
		 <single-column name="linkToExcel"><var name="excelFile"/></single-column>
		 <single-column name="linkToScreenshot"><var name="ScreenshotURL"/></single-column>              
       </export>
</config>
