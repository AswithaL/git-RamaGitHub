<?xml version="1.0" encoding="UTF-8"?>
<config charset="UTF-8">
<include-config code="ExceltoJson" /> 

    <var-def name="excelfile">
        <script><![CDATA[
            import java.io.File;
            import java.io.FileInputStream;
            import java.io.FileOutputStream;
            import java.io.IOException;
            import java.util.ArrayList;
            import java.util.Collection;
            import java.util.HashMap;
            import java.util.List;
            import java.util.Map;
            import java.util.Set;
            import java.util.TreeMap;
 
            import org.apache.poi.EncryptedDocumentException;
            import org.apache.poi.ss.usermodel.Cell;
            import org.apache.poi.ss.usermodel.CellStyle;
            import org.apache.poi.xssf.usermodel.XSSFRow;
            import org.apache.poi.xssf.usermodel.XSSFSheet;
            import org.apache.poi.xssf.usermodel.XSSFWorkbook;
 
            File createWorkbook() {
                XSSFWorkbook workbook_temp;
 			//	templatefile_url="C:\\21033\\abc.xlsx"
                File file_template = new File("C:\\21033\\abc.xlsx");
                String sheet_name = "CN-CFCCA000";
 
                if (file_template.exists() == false) {
                    System.out.println("Template file is not available");
                    log.error("******************** Template file is not available");
                }
                else {
                    System.out.println("Appending to existing workbook template '" + file_template + "'");
                    log.error("Appending to existing workbook template '" + file_template + "'");
                    try {
                        // Get the workbook instance from a template
 
                        FileInputStream fin = new FileInputStream(file_template);
                        workbook_temp = new XSSFWorkbook(fin);
 
                        // get the specific spreadsheet
                        XSSFSheet spreadsheet = workbook_temp.getSheet(sheet_name);
                        List separatedColumnsList = new ArrayList();
                        Map rowValues2 = new HashMap();
                        rowValues2.put("A", "2500.00");
                        rowValues2.put("B", "text1");
                        rowValues2.put("C", "text2");
                        separatedColumnsList.add(rowValues2);
 
                        // Create row object
                        XSSFRow row;
                        int rowid = 0;
 
                        //for each map,create a row
                        for (Map map : separatedColumnsList) {
                            Map rowValues = map;
                            row = spreadsheet.createRow(rowid++);
 
                            // get data to populate a row
                            Collection objectArr = rowValues.values();
                            int cellid = 0;
                            for (Object obj : objectArr) {
                                XSSFSheet template_sheet = workbook_temp.getSheet(sheet_name);
                                CellStyle origStyle = template_sheet.getColumnStyle(cellid);
                                System.out.println(origStyle.getDataFormatString());
                                Cell cell = row.createCell(cellid++);
                                cell.setCellStyle(origStyle);
                                cell.setCellValue((String) obj);
                            }
                        }
 
                        FileOutputStream
                        fop = new FileOutputStream(file_template);
                        workbook_temp.write(fop);
 
                    } catch (IOException e)
                    {
                        e.printStackTrace();
                        System.out.println("IOException");
                        log.error("IOException");
                    }
                catch (EncryptedDocumentException e1)
                    {
                        e1.printStackTrace();
                        System.out.println("EncryptedDocumentException");
                        log.error("EncryptedDocumentException");
                    }
                }
                return file_template;
            }
 
            f1 = createWorkbook();
 
        ]]></script>
    </var-def>
 
    <var-def name="fileLink">
        <s3 bucket="wf-vr-training">
            <s3-put path="temp.bucket/21033/data_list1.xlsx" content-type="application/xlsx" content-disposition="inline" acl="PublicRead">
                ${excelfile}
            </s3-put>
        </s3>
    </var-def>
    <export include-original-data="true">
        <single-column name="excel_file_link">
            <template>${fileLink.toString()}</template>
        </single-column>
    </export>
</config>