<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" charset="UTF-8">
  
       
    <script><![CDATA[
     
        import java.io.File;
        import java.io.FileInputStream;
        import java.io.FileNotFoundException;
        import java.io.FileOutputStream;
        import java.io.IOException;
        import java.io.OutputStream;
        import java.nio.file.Files;
        import java.nio.file.Path;
        import java.util.ArrayList;
        import java.util.HashMap;
        import java.util.Iterator;
        import java.util.LinkedHashMap;
        import java.util.List;
        import java.util.Map;
         
        import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
        import org.apache.poi.ss.usermodel.Cell;
        import org.apache.poi.ss.usermodel.Row;
        import org.apache.poi.ss.usermodel.CellStyle;
        import org.apache.poi.ss.usermodel.Sheet;
        import org.apache.poi.ss.usermodel.Workbook;
        import org.apache.poi.ss.util.CellRangeAddress;
         
        import org.apache.poi.xssf.usermodel.XSSFSheet;
        import org.apache.poi.xssf.usermodel.XSSFWorkbook;
        import org.apache.poi.xwpf.usermodel.XWPFDocument;
        import org.apache.poi.xwpf.usermodel.XWPFTable;
        import org.apache.poi.xwpf.usermodel.XWPFTableCell;
        import org.apache.poi.xwpf.usermodel.XWPFTableRow;
        import org.apache.poi.hssf.usermodel.HSSFCell;                         
         
         
        import org.apache.poi.EncryptedDocumentException;
       
         
        import org.apache.poi.ss.usermodel.WorkbookFactory;
         
        import org.docx4j.Docx4J;
        import org.docx4j.convert.out.FOSettings;
        import org.docx4j.fonts.IdentityPlusMapper;
        import org.docx4j.fonts.Mapper;
        import org.docx4j.fonts.PhysicalFont;
        import org.docx4j.fonts.PhysicalFonts;
        import org.docx4j.model.fields.FieldUpdater;
        import org.docx4j.openpackaging.exceptions.Docx4JException;
        import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
        import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTTbl;
        import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTTblPr;
        import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTTblWidth;
        import org.openxmlformats.schemas.wordprocessingml.x2006.main.STTblWidth;
     
    public  Workbook mergeExcelFiles(Workbook book, Workbook baseBook) throws IOException {
        for (int i = 0; i < baseBook.getNumberOfSheets(); i++) {
            System.out.println(baseBook.getSheetAt(i).getSheetName());
            // not entering sheet name, because of duplicated names
            copySheets(book.createSheet(baseBook.getSheetAt(i).getSheetName()), baseBook.getSheetAt(i));
        }
        System.out.println("================== FILTERING FINISHED SUCCESSFULLY =========================");
        return book;
    }
    public  void copySheets(Sheet newSheet, Sheet sheet) {
        copySheets_x(newSheet, sheet, false);
    }
    public  void copySheets_x(Sheet newSheet, Sheet sheet, boolean copyStyle) {
        int maxColumnNum = 0;
        Map styleMap = (copyStyle) ? new HashMap() : null;
        int headerRowIndex = 0;
        int newRowIndex = 0;
        String sourceSheetName = sheet.getSheetName();
        int idColumnIndex = getBaseNumberColumn(sourceSheetName);
        String filterBaseNumber = "123456";
        for (int i = sheet.getFirstRowNum(); i <= sheet.getLastRowNum(); i++) {
            if (i == sheet.getFirstRowNum()) {
                newRowIndex = i;
            }
            if (i == headerRowIndex || matchRow(sourceSheetName, sheet.getRow(i), filterBaseNumber, idColumnIndex)) {
                Row srcRow = sheet.getRow(i);
                Row destRow = newSheet.createRow(newRowIndex++);
                if (srcRow != null) {
                    copyRow(sheet, newSheet, srcRow, destRow, styleMap);
                    if (srcRow.getLastCellNum() > maxColumnNum) {
                        maxColumnNum = srcRow.getLastCellNum();
                    }
                }
            }
        }
        for (int i = 0; i <= maxColumnNum; i++) {
            newSheet.setColumnWidth(i, sheet.getColumnWidth(i));
        }
    }
    public  void copyRow(Sheet srcSheet, Sheet destSheet, Row srcRow, Row destRow, Map styleMap) {
        // manage a list of merged zone in order to not insert two times a
        // merged zone
        Set mergedRegions = new TreeSet();
        destRow.setHeight(srcRow.getHeight());
        // reckoning delta rows
        int deltaRows = destRow.getRowNum() - srcRow.getRowNum();
        // pour chaque row
        for (int j = srcRow.getFirstCellNum(); srcRow.getLastCellNum() > j; j++) {
             
            Cell oldCell = srcRow.getCell(j); // ancienne cell
            // System.out.println(oldCell);
            Cell newCell = destRow.getCell(j); // new cell
            // Enter the correct column selection condition for the if clause.
            if (oldCell.getColumnIndex() < 5) {
                if (oldCell != null) {
                    if (newCell == null) {
                        newCell = destRow.createCell(j);
                    }
                    // copy chaque cell
                    copyCell(oldCell, newCell, styleMap);
                    CellRangeAddress mergedRegion = getMergedRegion(srcSheet, srcRow.getRowNum(),
                            (short) oldCell.getColumnIndex());
                    if (mergedRegion != null) {
                        CellRangeAddress newMergedRegion = new CellRangeAddress(mergedRegion.getFirstRow(),
                                mergedRegion.getFirstColumn(), mergedRegion.getLastRow(), mergedRegion.getLastColumn());
                        if (isNewMergedRegion(newMergedRegion, mergedRegions)) {
                            mergedRegions.add(newMergedRegion);
                            destSheet.addMergedRegion(newMergedRegion);
                        }
                    }
                }
            }
        }
    }
    public  void copyCell(Cell oldCell, Cell newCell, Map styleMap) {
        if (styleMap != null) {
            if (oldCell.getSheet().getWorkbook() == newCell.getSheet().getWorkbook()) {
                newCell.setCellStyle(oldCell.getCellStyle());
            } else {
                int stHashCode = oldCell.getCellStyle().hashCode();
                CellStyle newCellStyle = (CellStyle) styleMap.get(stHashCode);
                if (newCellStyle == null) {
                    newCellStyle = newCell.getSheet().getWorkbook().createCellStyle();
                    newCellStyle.cloneStyleFrom(oldCell.getCellStyle());
                    styleMap.put(stHashCode, newCellStyle);
                }
                newCell.setCellStyle(newCellStyle);
            }
        }
        switch (oldCell.getCellType()) {
        case Cell.CELL_TYPE_STRING:
            newCell.setCellValue(oldCell.getStringCellValue());
            break;
        case Cell.CELL_TYPE_NUMERIC:
            newCell.setCellValue(oldCell.getNumericCellValue());
            break;
        case Cell.CELL_TYPE_BLANK:
            newCell.setCellType(HSSFCell.CELL_TYPE_BLANK);
            break;
        case Cell.CELL_TYPE_BOOLEAN:
            newCell.setCellValue(oldCell.getBooleanCellValue());
            break;
        case Cell.CELL_TYPE_ERROR:
            newCell.setCellErrorValue(oldCell.getErrorCellValue());
            break;
        case Cell.CELL_TYPE_FORMULA:
            newCell.setCellFormula(oldCell.getCellFormula());
            break;
        default:
            break;
        }
    }
    public  boolean matchRow(String sheetName, Row row, String filterId, int idColumnIndex) {
        Boolean isValidRow = false;
        Cell idCell = row.getCell(idColumnIndex);
        String value = null;
        switch (sheetName) {
        case "C4CH1000 - LC":
            value = getBaseNumber(idCell, "TAKE_LAST_6_DIGITS");
            break;
        case "C1101000 - Outstanding":
            value = getBaseNumber(idCell, "TAKE_LAST_6_DIGITS");
            break;
        case "CFCBA032-LND OUSTANDING":
            value = getBaseNumber(idCell, "TAKE_LAST_6_DIGITS");
            break;
        case "CN-CFCC000-CUSTOMER ACCOUNTS LI":
            value = getBaseNumber(idCell, "IGNORE_LAST_3_TAKE_6_PRECEDING_DIGITS");
            break;
        case "C4CH1000 - LCCFCFX123-C-CB7185 - FX OUTSTAND":
            value = getBaseNumber(idCell, "IGNORE_LAST_3_TAKE_6_PRECEDING_DIGITS");
            break;
        default:
            break;
        }
        if (value != null && !value.equals("")) {
            if (value.equals(filterId)) {
                isValidRow = true;
            } else {
                isValidRow = false;
            }
        }
        return isValidRow;
    }
    public  String getBaseNumber(Cell idCell, String criteria) {
        String cellValue = null;
        String baseNumber = null;
        if (idCell != null) {
            switch (idCell.getCellType()) {
            case Cell.CELL_TYPE_NUMERIC:
                cellValue = Long.toString((long) idCell.getNumericCellValue()).trim();
                break;
            case Cell.CELL_TYPE_STRING:
                cellValue = idCell.getStringCellValue().trim();
                break;
            default:
                System.out.println(idCell.getCellType());
                break;
            }
            if (cellValue != null && !cellValue.equals("") && cellValue.length() >= 6) {
                switch (criteria) {
                case "IGNORE_LAST_3_DIGITS":
                    baseNumber = cellValue.substring(0, cellValue.length() - 3);
                    break;
                case "TAKE_LAST_6_DIGITS":
                    baseNumber = cellValue.substring(cellValue.length() - 6);
                    break;
                case "IGNORE_LAST_3_TAKE_6_PRECEDING_DIGITS":
                    baseNumber = cellValue.substring(cellValue.length() - 9, cellValue.length() - 3);
                    break;
                default:
                    break;
                }
            }
        }
        //System.out.println("::::: " + baseNumber);
        return baseNumber;
    }
    public  int getBaseNumberColumn(String sheetName) {
        int filterColumnIndex = 0;
        switch (sheetName) {
        case "C4CH1000 - LC":
            filterColumnIndex = 3;
            break;
        case "C1101000 - Outstanding":
            filterColumnIndex = 5;
            break;
        case "CFCBA032-LND OUSTANDING":
            filterColumnIndex = 4;
            break;
        case "CN-CFCC000-CUSTOMER ACCOUNTS LI":
            filterColumnIndex = 2;
            break;
        case "CFCFX123-C-CB7185 - FX OUTSTAND":
            filterColumnIndex = 2;
            break;
        default:
            filterColumnIndex = -1;
            break;
        }
        return filterColumnIndex;
    }
    public  CellRangeAddress getMergedRegion(Sheet sheet, int rowNum, short cellNum) {
        for (int i = 0; i < sheet.getNumMergedRegions(); i++) {
            CellRangeAddress merged = sheet.getMergedRegion(i);
            if (merged.isInRange(rowNum, cellNum)) {
                return merged;
            }
        }
        return null;
    }
    private  boolean isNewMergedRegion(CellRangeAddress newMergedRegion, Collection mergedRegions) {
        return !mergedRegions.contains(newMergedRegion);
    }
 
    public  List readExcel(byte[] bFile) throws InvalidFormatException {
        List returnList = new ArrayList();
        FileInputStream fileInputStream = null;
        try {
            // byte[] bFile =
            // excelFile.getWrappedObject().get(0).getWrappedObject();
            File tempFile = File.createTempFile("test_excel_des", ".xlsx", null);
            FileOutputStream fileOuputStream = new FileOutputStream(tempFile);
            fileOuputStream.write(bFile);
            fileOuputStream.close();
            FileInputStream file = new FileInputStream(tempFile);
            // Get the workbook instance for XLS file
            XSSFWorkbook workbook = new XSSFWorkbook(file);
            Iterator sheetIterator = workbook.iterator();
            while (sheetIterator.hasNext()) {
                Map sheetMap = new HashMap(2);
                List headerList = new ArrayList();
                List rowList = new ArrayList();
                // Get sheet from the workbook
                XSSFSheet sheet = (XSSFSheet) sheetIterator.next();
                // Iterate through each rows from first sheet
                Iterator rowIterator = sheet.iterator();
                int rowIndex = 0;
                while (rowIterator.hasNext()) {
                    Row row = (Row) rowIterator.next();
                    if (rowIndex == 0) {
                        Iterator cellIterator = row.cellIterator();
                        while (cellIterator.hasNext()) {
                            headerList.add(((Cell) cellIterator.next()).getStringCellValue());
                        }
                    } else {
                        Map rowMap = new LinkedHashMap();
                        // For each row, iterate through each columns
                        Iterator cellIterator = row.cellIterator();
                        Iterator headerIterator = headerList.iterator();
                        while (cellIterator.hasNext()) {
                            rowMap.put(headerIterator.next(), cellIterator.next());
                        }
                        rowList.add(rowMap);
                    }
                    rowIndex++;
                }
                sheetMap.put("headerList", headerList);
                sheetMap.put("rowList", rowList);
                returnList.add(sheetMap);
            }
            workbook.close();
            tempFile.delete();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return returnList;
    }
    public  Path writeToWord(List sheetList) {
        File tempFile = null;
        XWPFDocument document = null;
        FileOutputStream out = null;
        try {
            tempFile = File.createTempFile("create_table", ".docx", null);
            // Write the Document in file system
            out = new FileOutputStream(tempFile);
            // Blank Document
            document = new XWPFDocument();
        } catch (IOException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        for (Map map : sheetList) {
            List headerList = new ArrayList((List) map.get("headerList"));
            List rowList = new ArrayList((List) map.get("rowList"));
            // create table
            XWPFTable table = document.createTable(rowList.size() + 1, headerList.size());
            CTTbl table2 = table.getCTTbl();
            CTTblPr pr = table2.getTblPr();
            CTTblWidth tblW = pr.getTblW();
            tblW.setW(BigInteger.valueOf(5000));
            tblW.setType(STTblWidth.PCT);
            pr.setTblW(tblW);
            table2.setTblPr(pr);
            if (!rowList.isEmpty()) {
                int rowIndex = 0;
                for (Map row : rowList) {
                    if (rowIndex == 0) {
                        XWPFTableRow headerRow = table.getRow(0);
                        for (int i = 0; i < headerList.size(); i++) {
                            headerRow.getCell(i).setText((String) headerList.get(i));
                            System.out.println("-----------------------" + (String) headerList.get(i));
                        }
                        rowIndex++;
                    }
                    System.out.println("=======" + rowIndex);
                    XWPFTableRow tableRow = table.getRow(rowIndex);
                    for (int i = 0; i < row.size(); i++) {
                        System.out.println("row: " + row + " , cell: " + i);
                        Cell cell = (Cell) row.get(headerList.get(i));
                        XWPFTableCell tableCell = tableRow.getCell(i);
                        switch (cell.getCellType()) {
                        case Cell.CELL_TYPE_NUMERIC:
                            tableCell.setText(Double.toString(cell.getNumericCellValue()));
                            // System.out.print(cell.getNumericCellValue() +
                            // "\t");
                            break;
                        case Cell.CELL_TYPE_STRING:
                            tableCell.setText(cell.getStringCellValue());
                            // System.out.print(cell.getStringCellValue() +
                            // "\t");
                            break;
                        case Cell.CELL_TYPE_BLANK:
                            tableCell.setText("");
                            // System.out.print("\t");
                            break;
                        case Cell.CELL_TYPE_BOOLEAN:
                            tableCell.setText(Boolean.toString(cell.getBooleanCellValue()));
                            // System.out.print(cell.getBooleanCellValue() +
                            // "\t");
                            break;
                        case Cell.CELL_TYPE_ERROR:
                            tableCell.setText("");
                            // System.out.print(cell.getErrorCellValue() +
                            // "\t");
                            break;
                        case Cell.CELL_TYPE_FORMULA:
                            tableCell.setText(cell.getCellFormula());
                            // System.out.print(cell.getCellFormula() + "\t");
                            break;
                        default:
                            tableCell.setText("");
                            // System.out.print("\t");
                            break;
                        }
                    }
                    rowIndex++;
                }
            } else {
                XWPFTableRow headerRow = table.getRow(0);
                for (int i = 0; i < headerList.size(); i++) {
                    headerRow.getCell(i).setText((String) headerList.get(i));
                    System.out.println("-----------------------" + (String) headerList.get(i));
                }
            }
            document.createParagraph().createRun().addBreak();
        }
        try {
            document.write(out);
            out.close();
            document.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        // log.info("create_table.docx written successully");
        return tempFile.toPath();
    }
    public  Path docxToPdf(Path path) {
        // path of the temporary docx file
        String inputFilePath = path.toString();
        // whether the intermediary FO and Docx files should be saved. (for
        // dubugging purposes)
        boolean saveFO = false;
        boolean saveDocx = true;
        // Font regex (optional). Set regex if you want to restrict to some
        // defined subset of fonts
        // Windows:
        // String
        // regex=".*(calibri|camb|cour|arial|symb|times|Times|zapf).*";
        // regex=".*(calibri|camb|cour|arial|times|comic|georgia|impact|LSANS|pala|tahoma|trebuc|verdana|symbol|webdings|wingding).*";
        String regex = null;
        PhysicalFonts.setRegex(regex);
        // Document loading (required)
        WordprocessingMLPackage wordMLPackage = null;
        if (inputFilePath == null) {
            // thorow exception
            throw new NullPointerException("File path is null");
        } else {
            // Load .docx file
            System.out.println("Input file at:  " + inputFilePath);
           // try {
                wordMLPackage = WordprocessingMLPackage.load(new java.io.File(inputFilePath));
           /*  } catch (Docx4JException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } */
        }
        // Refresh the values of DOCPROPERTY fields
        FieldUpdater updater = new FieldUpdater(wordMLPackage);
        String outputfilepath = null;
        try {
            updater.update(true);
            outputfilepath = inputFilePath.replaceAll(".docx", "") + ".pdf";
            // All methods write to an output stream
            OutputStream os = new java.io.FileOutputStream(outputfilepath);
            System.out.println("Attempting to use XSL FO");
            // Set up font mapper (optional)
            Mapper fontMapper = new IdentityPlusMapper();
            wordMLPackage.setFontMapper(fontMapper);
            PhysicalFont font = PhysicalFonts.get("Arial Unicode MS");
            // FO exporter setup (required)
            // .. the FOSettings object
            FOSettings foSettings = Docx4J.createFOSettings();
            if (saveFO) {
                foSettings.setFoDumpFile(new java.io.File(inputFilePath.replaceAll(".docx", "") + ".fo"));
            }
            foSettings.setWmlPackage(wordMLPackage);
            // Specify whether PDF export uses XSLT or not to create the FO
            // (XSLT takes longer, but is more complete).
            Docx4J.toFO(foSettings, os, Docx4J.FLAG_EXPORT_PREFER_XSL);
            System.out.println("Saved: " + outputfilepath);
             
            if (!saveDocx) {
                Files.delete(path);
            }
            // Clean up, so any ObfuscatedFontPart temp files can be deleted
            if (wordMLPackage.getMainDocumentPart().getFontTablePart() != null) {
                wordMLPackage.getMainDocumentPart().getFontTablePart().deleteEmbeddedFontTempFiles();
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return new File(outputfilepath).toPath();
    }
 
        FileInputStream file;
        try {
            file = new FileInputStream(new File("C:\\21033\\Country-China-Datatable.xlsx"));
            // file = new FileInputStream(new
            // File("src/main/resources/China/China_with data.xlsx"));
            XSSFWorkbook baseBook = new XSSFWorkbook(file);// WorkbookFactory.create(file);
            XSSFWorkbook workbook = new XSSFWorkbook();
            mergeExcelFiles(workbook, baseBook);
             
            File tempExcelFile = File.createTempFile("filtered_excel", ".xlsx", null);
            FileOutputStream outputStream = new FileOutputStream(tempExcelFile);
            workbook.write(outputStream);
            outputStream.flush();
            outputStream.close();
             
            FileInputStream fileInputStream = null;
            byte[] bFile = new byte[(int) tempExcelFile.length()];
            fileInputStream = new FileInputStream(tempExcelFile);
            fileInputStream.read(bFile);
            fileInputStream.close();
            Path path = null;
            path = docxToPdf(writeToWord(readExcel(bFile)));
             
            //array to hold bytestream to be sent to S3 in WF
            byte[] data = null;
         
            data = Files.readAllBytes(path);
            //Whether to delete the temporary pdf File.
            // Files.delete(path);
            // System.out.println(Arrays.toString(data));
            System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! FINISH !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (InvalidFormatException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
     
]]></script>
   
    <export include-original-data="true">
     
    </export>
</config>